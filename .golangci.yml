
# options for analysis running
run:
  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.
  # Default: the number of logical CPUs in the machine
  concurrency: 4
  
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 3m
  
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  
  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags: []

  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  # modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true

  go: '1.21'

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  formats: 
    - format: "colored-line-number"
      path: stdout

  # print lines of code with issue, default is true
  print-issued-lines: true
  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: true
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.
  show-stats: true

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    #ignore: fmt:.*,io/ioutil:^Read.*
    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    #exclude: /path/to/file.txt
  
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 5
    # Minimum occurrences of constant string count to trigger issue, 3 by default
    min-occurrences: 3
    # Exclude strings matching the given regular expression.
    # Default: ""
    ignore-strings: "get|post|put|delete|patch|options|head"
  
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    enabled-checks: []
      #- rangeValCopy
    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - regexpMust
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - performance
    disabled-tags:
      - experimental

    # settings passed to gocritic
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings: 
      captLocal: # must be valid enabled check name
        # Whether to restrict checker to params only.
        paramsOnly: true
      rangeValCopy:
        # Size in bytes that makes the warning trigger. Default: 128
        # This size shoulb be smaller
        sizeThreshold: 512
      hugeParam:
        # Size in bytes that makes the warning trigger. Default: 80
        # This size shoulb be smaller
        sizeThreshold: 512
      ifElseChain:
        # Min number of if-else blocks that makes the warning trigger.
        # Default: 2
        minThreshold: 4
  
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      #- TODO
      - FIXME
      - BUG
      #- NOTE
      #- OPTIMIZE # marks code that should be optimized before merging
      #- HACK # marks hack-arounds that should be removed before merging
      - XXX # Fatal! Important problem
  
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  
  govet:
    enable-all: false
    # enable or disable analyzers by name
    enable:
      - atomicalign
      - shadow
      - printf
    
    # settings per analyzer
    settings:
      # analyzer name, run `go tool vet help` to see all analyzers 
      printf:
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

  depguard:
    rules:
      # Name of a rule.
      main: 
        # Used to determine the package matching priority.
        # There are three different modes: `original`, `strict`, and `lax`.
        # Default: "original"
        list-mode: original
        deny:
          - pkg: github.com/sirupsen/logrus
            desc: "logging is allowed only by logutils.Log"
  
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1
  
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  
  testpackage:
    # regexp pattern to skip files
    skip-regexp: (export|internal)_test\.go
  
  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: true
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: true
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: true
    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: true
    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: true
  
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  
  gci:
    sections:
      - standard
      - default
      - prefix(github.com/free5gc)

    # Skip generated files.
    # Default: true
    skip-generated: true

    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true
  
  misspell:
    locale: US
    ignore-words: []
  
  mnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    # Default: ["argument", "case", "condition", "operation", "return", "assign"]
    checks:
      # - argument
      - case
      # - condition
      # - operation
      - return
      # - assign
    # List of numbers to exclude from analysis.
    # The numbers should be written as string.
    # Values always ignored: "1", "1.0", "0" and "0.0"
    # Default: []
    ignored-numbers: []
    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    # Default: []
    ignored-files: [
      '.+_test.go',
    ]
    # List of function patterns to exclude from analysis.
    # Following functions are always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
      - 'os\.Mkdir'
      - 'os\.MkdirAll'
      - '^math\.'
      - '^http\.StatusText$'

  # custom:
    # Each custom linter should have a unique name.

linters:
  disable-all: true
  enable:
    - errcheck
    - goconst
    - gocritic
    - godox
    - gofmt
    - govet
    - lll
    - nakedret
    - testpackage
    - staticcheck
    - unused
    - whitespace
    - gci
    - misspell
    - gosimple
    - mnd
    - ineffassign
    - typecheck
    - gofumpt
    - unconvert
    - predeclared
    - noctx
    - dogsled
    - bodyclose
    - asciicheck
    # - dupl 

  # Enable only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: true


issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude: []
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules: []
    # Exclude some linters from running on tests files.
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false
  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false
  # The list of ids of default excludes to include or disable. By default it's empty.
  include: []
    #- EXC0002 # disable excluding of issues about comments from golint
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  #max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  #max-same-issues: 0
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false
  # Show only new issues created after git revision `REV`
  new-from-rev: ""
  # Show only new issues created in git patch with set file path.
  #new-from-patch: path/to/patch/file
  # make issues output unique by line, default is true
  uniq-by-line: true

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  default-severity: error
  
  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules:
    - linters:
      - mnd
      severity: info